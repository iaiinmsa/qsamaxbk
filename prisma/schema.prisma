generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Objective {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String          @db.VarChar(255)
  goalBase      Decimal         @db.Decimal(10, 2)
  goalAverage   Decimal         @db.Decimal(10, 2)
  active        Boolean         @default(true)
  departmentId  Int?
  usercreate    String?         @db.VarChar(50)
  createdate    DateTime?       @db.DateTime
  objectiveGoal ObjectiveGoal[]

  @@map("Objective")
}

model ObjectiveGoal {
  idObjgoal   Int       @id @default(autoincrement()) @map("idObjgoal")
  idObjective Int
  currentGoal Decimal   @db.Decimal(10, 2)
  usercreate  String?   @db.VarChar(50)
  createdate  DateTime? @db.DateTime
  month       Int?
  years       Int?
  objective   Objective @relation(fields: [idObjective], references: [id], map: "fk_objective")

  @@map("objectiveGoal")
}

model CauseNonconformity {
  causeNonconformityId Int                    @id @default(autoincrement())
  description          String?                @db.VarChar(250)
  letter               String?                @db.VarChar(1)
  active               Boolean                @default(true)
  nonConformingProduct NonConformingProduct[]

  @@map("causeNonconformity")
}

model Disposition {
  dispositionId        Int                    @id @default(autoincrement())
  description          String?                @db.VarChar(250)
  active               Boolean                @default(true)
  nonConformingProduct NonConformingProduct[] // Relation to NonConformingProduct

  @@map("disposition")
}

model Product {
  productId             Int                    @id @default(autoincrement())
  description           String?                @db.VarChar(255)
  active                Boolean                @default(true)
  nonConformingProducts NonConformingProduct[] // Relation to NonConformingProduct

  @@map("product")
}

model NonConformityAttachment {
  nonConformityAttachmentId Int                  @id @default(autoincrement())
  filePath                  String?              @db.VarChar(500)
  fileName                  String?              @db.VarChar(255)
  loadDate                  DateTime?            @default(now())
  productLinks              ProductAttachments[]

  @@map("NonConformityAttachments")
}


model NonConformingProduct {
  nonConformingProductId          Int                  @id @default(autoincrement())
  productionOrderId               String?              @db.VarChar(50)
  idproject                       String?              @db.VarChar(50)
  manufacturingDate               DateTime?
  createdBy                       String?              @db.VarChar(50)
  creationDate                    DateTime?
  idProduct                       Int
  product                         Product              @relation(fields: [idProduct], references: [productId])
  departmentId                    Int?
  intendedRecipient               String?              @db.VarChar(150)
  rejectedQuantity                Decimal?             @db.Decimal(10, 2)
  planningComment                 String?              @db.Text
  idCauseNonConformity            Int
  causeNonConformity              CauseNonconformity   @relation(fields: [idCauseNonConformity], references: [causeNonconformityId])
  iddisposition                   Int
  disposition                     Disposition          @relation(fields: [iddisposition], references: [dispositionId])
  doComment                       String?              @db.Text
  dispositionCost                 Decimal?             @default(0) @db.Decimal(10, 2)
  estimatedClosingDate            DateTime?
  doObservation                   String?              @db.Text
  approvedProject                 Boolean              @default(false)
  approvedProjectUser             String?              @db.VarChar(50)
  approvedFinancialManagement     Boolean              @default(false)
  approvedFinancialManagementUser String?              @db.VarChar(50)
  approvedGeneralManagement       Boolean              @default(false)
  approvedGeneralManagementUser   String?              @db.VarChar(50)
  realClosingDate                 DateTime?
  checkObservation                String?              @db.Text
  attachmentLinks                 ProductAttachments[]

  @@map("NonConformingProduct")
}

model ProductAttachments {
  ProductAttachmentsid Int @id @default(autoincrement())

  nonConformingProductId    Int
  nonConformityAttachmentId Int

  // Relaciones a las tablas principales con onDelete y nombres de relación opuestos
  nonConformingProduct    NonConformingProduct    @relation(fields: [nonConformingProductId], references: [nonConformingProductId], onDelete: Cascade)
  nonConformityAttachment NonConformityAttachment @relation(fields: [nonConformityAttachmentId], references: [nonConformityAttachmentId], onDelete: Cascade)

  // Restricción única para el par de IDs para evitar duplicados
  @@unique([nonConformingProductId, nonConformityAttachmentId], name: "unique_product_attachment_pair")
  @@map("ProductAttachments")
}

model TransportOperator {
  id         Int     @id @default(autoincrement())
  name       String
  codeopen   Int? 

  // 👉 Relación inversa con nombre EXACTO
  fuelConsumptions         FuelConsumptionControl[] @relation("OperatorToFuel")
}

model TypeCar {
  id          Int    @id @default(autoincrement())
  description String

  cars  Car[]  @relation("TipoVehiculo") // 👈 nombre lógico
}


model Car {
  id                         Int      @id @default(autoincrement())
  name                       String
  idtipovehiculo             Int
  capacitytank               Decimal
  brand                      String?   // opcional
  model                      String?   // opcional
  licenseplate               String?   // opcional
  yearcar                    Int?
  creationDate               DateTime?
  fuelconsuptionperkilometer Decimal



  @@map("car") // Nombre real en la base de datos
  typeCar   TypeCar @relation("TipoVehiculo", fields: [idtipovehiculo], references: [id]) // 👈 esta es la relación
  fuelConsumptions           FuelConsumptionControl[] @relation("CarToFuel")
}


model FuelConsumptionControl {
  idtravel             Int      @id @default(autoincrement())
  orderDate           DateTime? 
  productionorderid   String?   @db.VarChar(50)
  activity            String?   @db.VarChar(50)
  initialreading      Decimal
  finalreeading       Decimal
  partial             Decimal
  consume             Decimal
  carId               Int 
  transportoperatorid Int 

  
  car                  Car               @relation("CarToFuel", fields: [carId], references: [id])
  transportOperator    TransportOperator @relation("OperatorToFuel", fields: [transportoperatorid], references: [id])
}
