generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Objective {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  description   String          @db.VarChar(255)
  goalBase      Decimal         @db.Decimal(10, 2)
  goalAverage   Decimal         @db.Decimal(10, 2)
  active        Boolean         @default(true)
  departmentId  Int?
  usercreate    String?         @db.VarChar(50)
  createdate    DateTime?       @db.DateTime
  objectiveGoal ObjectiveGoal[]

  @@map("Objective")
}

model ObjectiveGoal {
  idObjgoal   Int       @id @default(autoincrement()) @map("idObjgoal")
  idObjective Int
  currentGoal Decimal   @db.Decimal(10, 2)
  usercreate  String?   @db.VarChar(50)
  createdate  DateTime? @db.DateTime
  month       Int?
  years       Int?
  objective   Objective @relation(fields: [idObjective], references: [id], map: "fk_objective")

  @@map("objectiveGoal")
}

model CauseNonconformity {
  causeNonconformityId Int                    @id @default(autoincrement())
  description          String?                @db.VarChar(250)
  letter               String?                @db.VarChar(1)
  active               Boolean                @default(true)
  nonConformingProduct NonConformingProduct[]

  @@map("causeNonconformity")
}

model Disposition {
  dispositionId        Int                    @id @default(autoincrement())
  description          String?                @db.VarChar(250)
  active               Boolean                @default(true)
  nonConformingProduct NonConformingProduct[] // Relation to NonConformingProduct

  @@map("disposition")
}

model Product {
  productId             Int                    @id @default(autoincrement())
  description           String?                @db.VarChar(255)
  active                Boolean                @default(true)
  nonConformingProducts NonConformingProduct[] // Relation to NonConformingProduct

  @@map("product")
}

model NonConformityAttachment {
  nonConformityAttachmentId Int                  @id @default(autoincrement())
  filePath                  String?              @db.VarChar(500)
  fileName                  String?              @db.VarChar(255)
  loadDate                  DateTime?            @default(now())
  productLinks              ProductAttachments[]

  @@map("NonConformityAttachments")
}


model NonConformingProduct {
  nonConformingProductId          Int                  @id @default(autoincrement())
  productionOrderId               String?              @db.VarChar(50)
  idproject                       String?              @db.VarChar(50)
  manufacturingDate               DateTime?
  createdBy                       String?              @db.VarChar(50)
  creationDate                    DateTime?
  idProduct                       Int
  product                         Product              @relation(fields: [idProduct], references: [productId])
  departmentId                    Int?
  intendedRecipient               String?              @db.VarChar(150)
  rejectedQuantity                Decimal?             @db.Decimal(10, 2)
  planningComment                 String?              @db.Text
  idCauseNonConformity            Int
  causeNonConformity              CauseNonconformity   @relation(fields: [idCauseNonConformity], references: [causeNonconformityId])
  iddisposition                   Int
  disposition                     Disposition          @relation(fields: [iddisposition], references: [dispositionId])
  doComment                       String?              @db.Text
  dispositionCost                 Decimal?             @default(0) @db.Decimal(10, 2)
  estimatedClosingDate            DateTime?
  doObservation                   String?              @db.Text
  approvedProject                 Boolean              @default(false)
  approvedProjectUser             String?              @db.VarChar(50)
  approvedFinancialManagement     Boolean              @default(false)
  approvedFinancialManagementUser String?              @db.VarChar(50)
  approvedGeneralManagement       Boolean              @default(false)
  approvedGeneralManagementUser   String?              @db.VarChar(50)
  realClosingDate                 DateTime?
  checkObservation                String?              @db.Text
  attachmentLinks                 ProductAttachments[]

  @@map("NonConformingProduct")
}

model ProductAttachments {
  ProductAttachmentsid Int @id @default(autoincrement())

  nonConformingProductId    Int
  nonConformityAttachmentId Int

  // Relaciones a las tablas principales con onDelete y nombres de relación opuestos
  nonConformingProduct    NonConformingProduct    @relation(fields: [nonConformingProductId], references: [nonConformingProductId], onDelete: Cascade)
  nonConformityAttachment NonConformityAttachment @relation(fields: [nonConformityAttachmentId], references: [nonConformityAttachmentId], onDelete: Cascade)

  // Restricción única para el par de IDs para evitar duplicados
  @@unique([nonConformingProductId, nonConformityAttachmentId], name: "unique_product_attachment_pair")
  @@map("ProductAttachments")
}

model TransportOperator {
  id         Int     @id @default(autoincrement())
  name       String
  codeopen   Int? 

  // 👉 Relación inversa con nombre EXACTO
  fuelConsumptions         FuelConsumptionControl[] @relation("OperatorToFuel")
}

model TypeCar {
  id          Int    @id @default(autoincrement())
  description String

  cars  Car[]  @relation("TipoVehiculo") // 👈 nombre lógico
}


model Car {
  id                         Int      @id @default(autoincrement())
  name                       String
  idtipovehiculo             Int
  capacitytank               Decimal
  brand                      String?   // opcional
  model                      String?   // opcional
  licenseplate               String?   // opcional
  yearcar                    Int?
  creationDate               DateTime?
  fuelconsuptionperkilometer Decimal



  @@map("car") // Nombre real en la base de datos
  typeCar   TypeCar @relation("TipoVehiculo", fields: [idtipovehiculo], references: [id]) // 👈 esta es la relación
  fuelConsumptions           FuelConsumptionControl[] @relation("CarToFuel")
}


model FuelConsumptionControl {
  idtravel             Int      @id @default(autoincrement())
  orderDate           DateTime? 
  productionorderid   String?   @db.VarChar(50)
  activity            String?   @db.VarChar(50)
  initialreading      Decimal
  finalreeading       Decimal
  partial             Decimal
  consume             Decimal
  carId               Int 
  transportoperatorid Int 

  
  car                  Car               @relation("CarToFuel", fields: [carId], references: [id])
  transportOperator    TransportOperator @relation("OperatorToFuel", fields: [transportoperatorid], references: [id])
}

model plan_header {
  idPlan           Int            @id @default(autoincrement()) @map("idPlan")
  user_name        String
  production_order String
  project_name     String
  created_at       DateTime?      @default(now())
  plan_details     plan_detail[]  @relation("PlanHeaderToDetails")
}

model plan_detail {
  idplanDetail     Int          @id @default(autoincrement()) @map("idplanDetail")
  plan_header_id   Int
  file_path        String
  plan_type_id   Int         @map("plan_type")  // 👈 sigue apuntando a la columna existente
  uploaded_by      String
  file_name        String
  upload_at        DateTime?    @default(now())
  plan_review      String

  plan_header      plan_header  @relation("PlanHeaderToDetails", fields: [plan_header_id], references: [idPlan])
  plan_type      plan_type   @relation(fields: [plan_type_id], references: [idplanttype])
}


model plan_type {
  idplanttype   Int    @id @default(autoincrement())
  nomenclature  String
  name          String
  descripcion   String

  plan_details  plan_detail[]
}

model VacationRequest {
  id                           Int      @id @default(autoincrement())
  request_date                 DateTime
  employee_code                String   @db.VarChar(50)
  years_worked                 Int
  vacation_hours               Decimal  @db.Decimal(10, 2)
  vacation_start_date          DateTime
  vacation_end_date            DateTime
  half_day_vacation            Boolean  @default(false)
  vacation_period              String   @db.VarChar(20)
  status                       Status   @default(register)
  requester                    String   @db.VarChar(100)
  immediate_supervisor_approved Boolean @default(false)
  process_manager_approved     Boolean  @default(false)
  pending_days                 Decimal  @db.Decimal(10, 2)
  current_days                 Decimal  @db.Decimal(10, 2)
  calculated_days              Decimal  @db.Decimal(10, 2)
  process_manageruser_by       String   @db.VarChar(255)
  process_manager_at           DateTime?
  superviso_by                 String   @db.VarChar(255)
  superviso_at                 DateTime?
}

enum Status {
  pending
  approved
  rejected
  register
  empty // for ''
}

model ApprovalGroup {
  id          Int                      @id @default(autoincrement())
  name        String                   @db.VarChar(100)
  description String?                   @db.Text
  createdAt   DateTime                  @default(now()) @map("created_at")

  employees   ApprovalGroupEmployee[]
  managers    ApprovalGroupManager[]

  @@map("approval_group") // nombre real en MySQL
}

model ApprovalGroupEmployee {
  id           Int            @id @default(autoincrement())
  groupId      Int            @map("group_id")
  employeeCode String         @map("employee_code") @db.VarChar(50)

  group        ApprovalGroup  @relation(fields: [groupId], references: [id])

  @@map("approval_group_employees") // nombre real en MySQL
}

model ApprovalGroupManager {
  id             Int            @id @default(autoincrement())
  groupId        Int            @map("group_id")
  superviserCode String         @map("superviser_code") @db.VarChar(255)

  group          ApprovalGroup  @relation(fields: [groupId], references: [id])

  @@map("approval_group_managers") // nombre real en MySQL
}


model ManufacturingOrder {
  idManufacturingOrder    Int                        @id @default(autoincrement())
  productionOrder         String                     @unique
  assignedTo              String?
  requestedBy             String?
  createDate              DateTime?
  customerCode            String?
  contactName             String?
  contactPhone            String?
  contactEmail            String?
  projectScope            String?
  location                String?
  metalWeight             Decimal?
  unitofMeasure           String?
  grandTotal              Decimal
  currency                String?
  paymentFactor           Decimal?
  payTerm                 String?
  deliveryTime            String?
  productionOrderLabel    String?
  ProductionOrderId       Int?
  observation             String?
  createAt                DateTime?
  createBy                String?

  details                 ManufacturingOrderDetail[]

    @@map("manufacturing_order") // nombre real en MySQL
}

model ManufacturingOrderDetail {
  idmanufacturingOrderDetail Int                   @id @default(autoincrement())
  manufacturingOrderId       Int
  filePath                   String?
  uploadBy                    String?
  fileName                    String?
  description                 String?

  order                     ManufacturingOrder     @relation(fields: [manufacturingOrderId], references: [idManufacturingOrder])

  @@map("manufacturing_order_Detail") // nombre real en MySQL
}


// schema.prisma
model ReportHeader {
  id           Int      @id @default(autoincrement())
  systemName   String   @map("system_name")
  companyLogo  String?  @map("company_logo")  // opcional, porque es NULLable
  reportName   String   @map("report_name")
  reportCode   String   @map("report_code")
  version      String?  @default("1.0")
  createdAt    DateTime? @map("created_at")   // opcional para que pueda ser NULL
  createdBy    String   @map("created_by")

  @@map("report_headers") // nombre real de la tabla en MySQL
}

